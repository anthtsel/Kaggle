{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3136,"databundleVersionId":26502,"sourceType":"competition"}],"dockerImageVersionId":30698,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport sys\nimport os\nimport random\nfrom pathlib import Path\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import ListedColormap\nimport seaborn as sns","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-04-27T02:15:58.108406Z","iopub.execute_input":"2024-04-27T02:15:58.108909Z","iopub.status.idle":"2024-04-27T02:15:59.321165Z","shell.execute_reply.started":"2024-04-27T02:15:58.108869Z","shell.execute_reply":"2024-04-27T02:15:59.320017Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"train_df = pd.read_csv(\"/kaggle/input/titanic/train.csv\")\ntest_df = pd.read_csv(\"/kaggle/input/titanic/test.csv\")","metadata":{"execution":{"iopub.status.busy":"2024-04-27T02:15:59.323154Z","iopub.execute_input":"2024-04-27T02:15:59.323606Z","iopub.status.idle":"2024-04-27T02:15:59.354315Z","shell.execute_reply.started":"2024-04-27T02:15:59.323576Z","shell.execute_reply":"2024-04-27T02:15:59.353166Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"train_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-04-27T02:15:59.356182Z","iopub.execute_input":"2024-04-27T02:15:59.356627Z","iopub.status.idle":"2024-04-27T02:15:59.400175Z","shell.execute_reply.started":"2024-04-27T02:15:59.356587Z","shell.execute_reply":"2024-04-27T02:15:59.399022Z"},"trusted":true},"execution_count":4,"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  \\\n0            1         0       3   \n1            2         1       1   \n2            3         1       3   \n3            4         1       1   \n4            5         0       3   \n\n                                                Name     Sex   Age  SibSp  \\\n0                            Braund, Mr. Owen Harris    male  22.0      1   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n2                             Heikkinen, Miss. Laina  female  26.0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n4                           Allen, Mr. William Henry    male  35.0      0   \n\n   Parch            Ticket     Fare Cabin Embarked  \n0      0         A/5 21171   7.2500   NaN        S  \n1      0          PC 17599  71.2833   C85        C  \n2      0  STON/O2. 3101282   7.9250   NaN        S  \n3      0            113803  53.1000  C123        S  \n4      0            373450   8.0500   NaN        S  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"test_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-04-27T02:15:59.403682Z","iopub.execute_input":"2024-04-27T02:15:59.404188Z","iopub.status.idle":"2024-04-27T02:15:59.424104Z","shell.execute_reply.started":"2024-04-27T02:15:59.404148Z","shell.execute_reply":"2024-04-27T02:15:59.423019Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Pclass                                          Name     Sex  \\\n0          892       3                              Kelly, Mr. James    male   \n1          893       3              Wilkes, Mrs. James (Ellen Needs)  female   \n2          894       2                     Myles, Mr. Thomas Francis    male   \n3          895       3                              Wirz, Mr. Albert    male   \n4          896       3  Hirvonen, Mrs. Alexander (Helga E Lindqvist)  female   \n\n    Age  SibSp  Parch   Ticket     Fare Cabin Embarked  \n0  34.5      0      0   330911   7.8292   NaN        Q  \n1  47.0      1      0   363272   7.0000   NaN        S  \n2  62.0      0      0   240276   9.6875   NaN        Q  \n3  27.0      0      0   315154   8.6625   NaN        S  \n4  22.0      1      1  3101298  12.2875   NaN        S  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>892</td>\n      <td>3</td>\n      <td>Kelly, Mr. James</td>\n      <td>male</td>\n      <td>34.5</td>\n      <td>0</td>\n      <td>0</td>\n      <td>330911</td>\n      <td>7.8292</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>893</td>\n      <td>3</td>\n      <td>Wilkes, Mrs. James (Ellen Needs)</td>\n      <td>female</td>\n      <td>47.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>363272</td>\n      <td>7.0000</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>894</td>\n      <td>2</td>\n      <td>Myles, Mr. Thomas Francis</td>\n      <td>male</td>\n      <td>62.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>240276</td>\n      <td>9.6875</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>895</td>\n      <td>3</td>\n      <td>Wirz, Mr. Albert</td>\n      <td>male</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>315154</td>\n      <td>8.6625</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>896</td>\n      <td>3</td>\n      <td>Hirvonen, Mrs. Alexander (Helga E Lindqvist)</td>\n      <td>female</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3101298</td>\n      <td>12.2875</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"train_df.info()","metadata":{"execution":{"iopub.status.busy":"2024-04-27T02:15:59.425761Z","iopub.execute_input":"2024-04-27T02:15:59.426378Z","iopub.status.idle":"2024-04-27T02:15:59.453294Z","shell.execute_reply.started":"2024-04-27T02:15:59.426339Z","shell.execute_reply":"2024-04-27T02:15:59.451985Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 891 entries, 0 to 890\nData columns (total 12 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   PassengerId  891 non-null    int64  \n 1   Survived     891 non-null    int64  \n 2   Pclass       891 non-null    int64  \n 3   Name         891 non-null    object \n 4   Sex          891 non-null    object \n 5   Age          714 non-null    float64\n 6   SibSp        891 non-null    int64  \n 7   Parch        891 non-null    int64  \n 8   Ticket       891 non-null    object \n 9   Fare         891 non-null    float64\n 10  Cabin        204 non-null    object \n 11  Embarked     889 non-null    object \ndtypes: float64(2), int64(5), object(5)\nmemory usage: 83.7+ KB\n","output_type":"stream"}]},{"cell_type":"code","source":"test_df.info()","metadata":{"execution":{"iopub.status.busy":"2024-04-27T02:15:59.455078Z","iopub.execute_input":"2024-04-27T02:15:59.455507Z","iopub.status.idle":"2024-04-27T02:15:59.470156Z","shell.execute_reply.started":"2024-04-27T02:15:59.455462Z","shell.execute_reply":"2024-04-27T02:15:59.468979Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 418 entries, 0 to 417\nData columns (total 11 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   PassengerId  418 non-null    int64  \n 1   Pclass       418 non-null    int64  \n 2   Name         418 non-null    object \n 3   Sex          418 non-null    object \n 4   Age          332 non-null    float64\n 5   SibSp        418 non-null    int64  \n 6   Parch        418 non-null    int64  \n 7   Ticket       418 non-null    object \n 8   Fare         417 non-null    float64\n 9   Cabin        91 non-null     object \n 10  Embarked     418 non-null    object \ndtypes: float64(2), int64(4), object(5)\nmemory usage: 36.0+ KB\n","output_type":"stream"}]},{"cell_type":"code","source":"train_df.describe()","metadata":{"execution":{"iopub.status.busy":"2024-04-27T02:15:59.471841Z","iopub.execute_input":"2024-04-27T02:15:59.472434Z","iopub.status.idle":"2024-04-27T02:15:59.509576Z","shell.execute_reply.started":"2024-04-27T02:15:59.472396Z","shell.execute_reply":"2024-04-27T02:15:59.508611Z"},"trusted":true},"execution_count":8,"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"       PassengerId    Survived      Pclass         Age       SibSp  \\\ncount   891.000000  891.000000  891.000000  714.000000  891.000000   \nmean    446.000000    0.383838    2.308642   29.699118    0.523008   \nstd     257.353842    0.486592    0.836071   14.526497    1.102743   \nmin       1.000000    0.000000    1.000000    0.420000    0.000000   \n25%     223.500000    0.000000    2.000000   20.125000    0.000000   \n50%     446.000000    0.000000    3.000000   28.000000    0.000000   \n75%     668.500000    1.000000    3.000000   38.000000    1.000000   \nmax     891.000000    1.000000    3.000000   80.000000    8.000000   \n\n            Parch        Fare  \ncount  891.000000  891.000000  \nmean     0.381594   32.204208  \nstd      0.806057   49.693429  \nmin      0.000000    0.000000  \n25%      0.000000    7.910400  \n50%      0.000000   14.454200  \n75%      0.000000   31.000000  \nmax      6.000000  512.329200  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>714.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>446.000000</td>\n      <td>0.383838</td>\n      <td>2.308642</td>\n      <td>29.699118</td>\n      <td>0.523008</td>\n      <td>0.381594</td>\n      <td>32.204208</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>257.353842</td>\n      <td>0.486592</td>\n      <td>0.836071</td>\n      <td>14.526497</td>\n      <td>1.102743</td>\n      <td>0.806057</td>\n      <td>49.693429</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>0.420000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>223.500000</td>\n      <td>0.000000</td>\n      <td>2.000000</td>\n      <td>20.125000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>7.910400</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>446.000000</td>\n      <td>0.000000</td>\n      <td>3.000000</td>\n      <td>28.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>14.454200</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>668.500000</td>\n      <td>1.000000</td>\n      <td>3.000000</td>\n      <td>38.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>31.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>891.000000</td>\n      <td>1.000000</td>\n      <td>3.000000</td>\n      <td>80.000000</td>\n      <td>8.000000</td>\n      <td>6.000000</td>\n      <td>512.329200</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"test_df.describe()","metadata":{"execution":{"iopub.status.busy":"2024-04-27T02:15:59.510685Z","iopub.execute_input":"2024-04-27T02:15:59.511682Z","iopub.status.idle":"2024-04-27T02:15:59.539444Z","shell.execute_reply.started":"2024-04-27T02:15:59.511647Z","shell.execute_reply":"2024-04-27T02:15:59.538669Z"},"trusted":true},"execution_count":9,"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"       PassengerId      Pclass         Age       SibSp       Parch        Fare\ncount   418.000000  418.000000  332.000000  418.000000  418.000000  417.000000\nmean   1100.500000    2.265550   30.272590    0.447368    0.392344   35.627188\nstd     120.810458    0.841838   14.181209    0.896760    0.981429   55.907576\nmin     892.000000    1.000000    0.170000    0.000000    0.000000    0.000000\n25%     996.250000    1.000000   21.000000    0.000000    0.000000    7.895800\n50%    1100.500000    3.000000   27.000000    0.000000    0.000000   14.454200\n75%    1204.750000    3.000000   39.000000    1.000000    0.000000   31.500000\nmax    1309.000000    3.000000   76.000000    8.000000    9.000000  512.329200","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Pclass</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>418.000000</td>\n      <td>418.000000</td>\n      <td>332.000000</td>\n      <td>418.000000</td>\n      <td>418.000000</td>\n      <td>417.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>1100.500000</td>\n      <td>2.265550</td>\n      <td>30.272590</td>\n      <td>0.447368</td>\n      <td>0.392344</td>\n      <td>35.627188</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>120.810458</td>\n      <td>0.841838</td>\n      <td>14.181209</td>\n      <td>0.896760</td>\n      <td>0.981429</td>\n      <td>55.907576</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>892.000000</td>\n      <td>1.000000</td>\n      <td>0.170000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>996.250000</td>\n      <td>1.000000</td>\n      <td>21.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>7.895800</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>1100.500000</td>\n      <td>3.000000</td>\n      <td>27.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>14.454200</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>1204.750000</td>\n      <td>3.000000</td>\n      <td>39.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>31.500000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>1309.000000</td>\n      <td>3.000000</td>\n      <td>76.000000</td>\n      <td>8.000000</td>\n      <td>9.000000</td>\n      <td>512.329200</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"# Missing Data Function\nInput:\ndata: This parameter expects a pandas DataFrame as input, presumably containing the Titanic data for your Kaggle competition.\n\nFunction Explanation:\ntotal = data.isnull().sum(): This line calculates the total number of missing values for each column in the DataFrame. data.isnull() generates a DataFrame of True/False values indicating missing/non-missing data, and .sum() then sums up the True values (which represent missing data) along each column.\n\npercent = (data.isnull().sum() / data.isnull().count()) * 100: This line calculates the percentage of missing values for each column. It divides the total number of missing values (data.isnull().sum()) by the total number of entries in each column (data.isnull().count()), and then multiplies by 100 to get the percentage.\n\ntt = pd.concat([total, percent], axis=1, keys=['Total', 'Percent']): Here, pd.concat() is used to concatenate the total and percent DataFrames along axis 1 (columns). The keys parameter assigns column names 'Total' and 'Percent' to the concatenated DataFrame tt.\n\ntypes = [] and the subsequent for loop: This section initializes an empty list types and then iterates through each column (col) in the DataFrame data. For each column, it obtains the data type using data[col].dtype and converts it to a string (str(data[col].dtype)). It then appends this string representation of the data type to the types list.\n\ntt['Types'] = types: After collecting all data types in the types list, this line adds a new column 'Types' to the DataFrame tt and assigns the collected data types to this column.\n\nreturn(np.transpose(tt)): Finally, the function transposes the DataFrame tt (swaps rows and columns) using np.transpose() from NumPy and returns this transposed DataFrame. This transposed DataFrame will have columns representing different features in your data, along with information about the total missing values, percentage of missing values, and data types for each feature.","metadata":{}},{"cell_type":"code","source":"def missing_data(data):\n    total = data.isnull().sum()\n    percent = (data.isnull().sum()/data.isnull().count()*100)\n    tt = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\n    types = []\n    for col in data.columns:\n        dtype = str(data[col].dtype)\n        types.append(dtype)\n    tt['Types'] = types\n    return(np.transpose(tt))","metadata":{"execution":{"iopub.status.busy":"2024-04-27T02:20:46.723429Z","iopub.execute_input":"2024-04-27T02:20:46.723818Z","iopub.status.idle":"2024-04-27T02:20:46.731193Z","shell.execute_reply.started":"2024-04-27T02:20:46.723785Z","shell.execute_reply":"2024-04-27T02:20:46.730224Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"missing_data(train_df)","metadata":{"execution":{"iopub.status.busy":"2024-04-27T02:20:49.120404Z","iopub.execute_input":"2024-04-27T02:20:49.120991Z","iopub.status.idle":"2024-04-27T02:20:49.142041Z","shell.execute_reply.started":"2024-04-27T02:20:49.120960Z","shell.execute_reply":"2024-04-27T02:20:49.140658Z"},"trusted":true},"execution_count":15,"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"        PassengerId Survived Pclass    Name     Sex       Age  SibSp  Parch  \\\nTotal             0        0      0       0       0       177      0      0   \nPercent         0.0      0.0    0.0     0.0     0.0  19.86532    0.0    0.0   \nTypes         int64    int64  int64  object  object   float64  int64  int64   \n\n         Ticket     Fare      Cabin  Embarked  \nTotal         0        0        687         2  \nPercent     0.0      0.0  77.104377  0.224467  \nTypes    object  float64     object    object  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Total</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>177</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>687</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>Percent</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>19.86532</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>77.104377</td>\n      <td>0.224467</td>\n    </tr>\n    <tr>\n      <th>Types</th>\n      <td>int64</td>\n      <td>int64</td>\n      <td>int64</td>\n      <td>object</td>\n      <td>object</td>\n      <td>float64</td>\n      <td>int64</td>\n      <td>int64</td>\n      <td>object</td>\n      <td>float64</td>\n      <td>object</td>\n      <td>object</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"missing_data(test_df)","metadata":{"execution":{"iopub.status.busy":"2024-04-27T02:21:06.955819Z","iopub.execute_input":"2024-04-27T02:21:06.956230Z","iopub.status.idle":"2024-04-27T02:21:06.977721Z","shell.execute_reply.started":"2024-04-27T02:21:06.956197Z","shell.execute_reply":"2024-04-27T02:21:06.976606Z"},"trusted":true},"execution_count":16,"outputs":[{"execution_count":16,"output_type":"execute_result","data":{"text/plain":"        PassengerId Pclass    Name     Sex        Age  SibSp  Parch  Ticket  \\\nTotal             0      0       0       0         86      0      0       0   \nPercent         0.0    0.0     0.0     0.0  20.574163    0.0    0.0     0.0   \nTypes         int64  int64  object  object    float64  int64  int64  object   \n\n             Fare      Cabin Embarked  \nTotal           1        327        0  \nPercent  0.239234  78.229665      0.0  \nTypes     float64     object   object  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Total</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>86</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>327</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>Percent</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>20.574163</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.239234</td>\n      <td>78.229665</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>Types</th>\n      <td>int64</td>\n      <td>int64</td>\n      <td>object</td>\n      <td>object</td>\n      <td>float64</td>\n      <td>int64</td>\n      <td>int64</td>\n      <td>object</td>\n      <td>float64</td>\n      <td>object</td>\n      <td>object</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"# Most Frequent data Function\nInput:\ndata: This function expects a pandas DataFrame as input.\n\nFunction Explanation:\ntotal = data.count(): This line calculates the total number of non-null values for each column in the DataFrame data. It uses the .count() method, which counts the number of non-null entries along each column axis.\n\ntt = pd.DataFrame(total): Here, a new DataFrame tt is created using the total counts obtained in the previous step. This DataFrame will initially have one column named 'Total' containing the counts of non-null values for each column.\n\ntt.columns = ['Total']: Renames the column in the DataFrame tt to 'Total'.\n\nitems = [] and vals = []: These lines initialize empty lists items and vals, which will be used to store the most frequent item and its frequency for each column, respectively.\nfor col in data.columns: Initiates a loop that iterates through each column (col) in the DataFrame data.\n\ntry: and except Exception as ex:: This part of the code handles potential errors that might occur during the execution of the loop.\n\nitm = data[col].value_counts().index[0] and val = data[col].value_counts().values[0]: Within the loop, these lines calculate the most frequent item (itm) and its frequency (val) for each column. It uses the value_counts() method to count the occurrences of each unique value in the column, then extracts the most frequent item and its count from the result.\n\nitems.append(itm) and vals.append(val): These lines append the most frequent item (itm) and its frequency (val) to the items and vals lists, respectively.\n\ntt['Most frequent item'] = items: Adds a new column 'Most frequent item' to the DataFrame tt and populates it with the most frequent items for each column.\n\ntt['Frequency'] = vals: Adds another new column 'Frequency' to the DataFrame tt and populates it with the corresponding frequencies of the most frequent items.\n\ntt['Percent from total'] = np.round(vals / total * 100, 3): Calculates the percentage of the most frequent item's frequency compared to the total non-null values in each column. It divides the frequencies (vals) by the total counts (total), multiplies by 100, and rounds to three decimal places.\nreturn(np.transpose(tt)): Transposes the DataFrame tt and returns it. This transposed DataFrame will have columns representing different features in your data, along with information about the most frequent item, its frequency, and the percentage it represents from the total non-null values for each feature.\n\nThis function is helpful for identifying the most common values in each column of your DataFrame and understanding their prevalence relative to the total non-null values in each column.","metadata":{"execution":{"iopub.status.busy":"2024-04-27T02:21:53.173893Z","iopub.execute_input":"2024-04-27T02:21:53.175021Z","iopub.status.idle":"2024-04-27T02:21:53.179621Z","shell.execute_reply.started":"2024-04-27T02:21:53.174971Z","shell.execute_reply":"2024-04-27T02:21:53.178492Z"}}},{"cell_type":"code","source":"def most_frequent_values(data):\n    total = data.count()\n    tt = pd.DataFrame(total)\n    tt.columns = ['Total']\n    items = []\n    vals = []\n    for col in data.columns:\n        try:\n            itm = data[col].value_counts().index[0]\n            val = data[col].value_counts().values[0]\n            items.append(itm)\n            vals.append(val)\n        except Exception as ex:\n            print(ex)\n            items.append(0)\n            vals.append(0)\n            continue\n    tt['Most frequent item'] = items\n    tt['Frequence'] = vals\n    tt['Percent from total'] = np.round(vals / total * 100, 3)\n    return(np.transpose(tt))","metadata":{"execution":{"iopub.status.busy":"2024-04-27T02:25:08.850720Z","iopub.execute_input":"2024-04-27T02:25:08.851169Z","iopub.status.idle":"2024-04-27T02:25:08.860309Z","shell.execute_reply.started":"2024-04-27T02:25:08.851105Z","shell.execute_reply":"2024-04-27T02:25:08.859149Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"most_frequent_values(train_df)","metadata":{"execution":{"iopub.status.busy":"2024-04-27T02:25:23.463821Z","iopub.execute_input":"2024-04-27T02:25:23.464251Z","iopub.status.idle":"2024-04-27T02:25:23.498656Z","shell.execute_reply.started":"2024-04-27T02:25:23.464203Z","shell.execute_reply":"2024-04-27T02:25:23.497612Z"},"trusted":true},"execution_count":19,"outputs":[{"execution_count":19,"output_type":"execute_result","data":{"text/plain":"                   PassengerId Survived  Pclass                     Name  \\\nTotal                      891      891     891                      891   \nMost frequent item           1        0       3  Braund, Mr. Owen Harris   \nFrequence                    1      549     491                        1   \nPercent from total       0.112   61.616  55.107                    0.112   \n\n                       Sex    Age   SibSp   Parch  Ticket   Fare    Cabin  \\\nTotal                  891    714     891     891     891    891      204   \nMost frequent item    male   24.0       0       0  347082   8.05  B96 B98   \nFrequence              577     30     608     678       7     43        4   \nPercent from total  64.759  4.202  68.238  76.094   0.786  4.826    1.961   \n\n                   Embarked  \nTotal                   889  \nMost frequent item        S  \nFrequence               644  \nPercent from total   72.441  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Total</th>\n      <td>891</td>\n      <td>891</td>\n      <td>891</td>\n      <td>891</td>\n      <td>891</td>\n      <td>714</td>\n      <td>891</td>\n      <td>891</td>\n      <td>891</td>\n      <td>891</td>\n      <td>204</td>\n      <td>889</td>\n    </tr>\n    <tr>\n      <th>Most frequent item</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>24.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>347082</td>\n      <td>8.05</td>\n      <td>B96 B98</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>Frequence</th>\n      <td>1</td>\n      <td>549</td>\n      <td>491</td>\n      <td>1</td>\n      <td>577</td>\n      <td>30</td>\n      <td>608</td>\n      <td>678</td>\n      <td>7</td>\n      <td>43</td>\n      <td>4</td>\n      <td>644</td>\n    </tr>\n    <tr>\n      <th>Percent from total</th>\n      <td>0.112</td>\n      <td>61.616</td>\n      <td>55.107</td>\n      <td>0.112</td>\n      <td>64.759</td>\n      <td>4.202</td>\n      <td>68.238</td>\n      <td>76.094</td>\n      <td>0.786</td>\n      <td>4.826</td>\n      <td>1.961</td>\n      <td>72.441</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}